
primitive("b9_prim_puts", "void", "string");
primitive("hashTableAllocate", "Int64");
primitive("hashTablePut", "void", "string", "string");
primitive("hashTableGet", "string", "string"); 

function b9puts(a) {
    b9_prim_puts(a);
}

function testHashmap( ) {
    var ht = hashTableAllocate();
	hashTablePut (ht, "hi", "mom");
	var result = hashTableGet (ht, "hi");
	b9puts(result);
	hashTablePut (ht, "hi2", "mom2");
	var result = hashTableGet (ht, "hi");
	b9puts(result);
	var result = hashTableGet (ht, "hi2");
	b9puts(result);
 
	hashTablePut (ht, "hi3", "mom3");
	hashTablePut (ht, "hi4", "mom4");
	hashTablePut (ht, "hi5", "mom5");
	hashTablePut (ht, "hi6", "mom6");

	var result = hashTableGet (ht, "hi6");
	b9puts(result);
	b9puts("I'M DONE DONE DONE");

}

// main, no args for b9 entry point
function fib(arg) {
	if (3 > arg)
	return 1;

	return fib(arg - 1) + fib(arg - 2);
}

function b9main() {
	var a = 100;
 
    b9puts("yyyyy");

	testHashmap( );


    b9puts("xxxxx");
    b9puts("xxxxx2");
    b9puts("xxxxx3");
    b9puts("xxxxx4");

	while (a > 0) {
		a = a - 1;
		fib(12);
	}
}

function call_sub(a,b) {
	var c = a-b;
	return c; 
}

function call_add(a,b) {
	var c = a+b;
	return c;
}

// test a while loop, should return repeatCount * 2
function test_while(repeatCount) { 
	var result = 0;
	var a = repeatCount; 
	while (a > 0) {
		a = a - 1;
		result = result + 2;
	}
	return result;
}
